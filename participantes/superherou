Rinha de Backend: A Solução Imbatível em Bash para Super-Heróis

Objetivo: Dominar a Rinha de Backend com uma API de Super-Heróis em Bash, otimizada para performance e escalabilidade, com testes automatizados, persistência, backups e balanceamento de carga.

Inspiração: Linus Torvalds (simplicidade e robustez) e Steve Jobs (elegância e usabilidade)

Linguagem: Bash (100%)

Desafios:

Restrições de Recursos: 1.5 CPUs e 3GB de RAM.

Escalabilidade: Manejar até 1.000.000 de super-heróis.

Persistência: Salvar dados em memória, com backups em disco.

Performance: Otimizar para a máxima velocidade.

Ambiente: Samsung Galaxy A20 (Recursos limitados: CPU e RAM).

Abordagem:

Banco de Dados: Prevayler (em memória com snapshots em disco).

Balanceador de Carga: Deep Load Balancer em Bash (escalabilidade horizontal e vertical).

Gerenciamento de Memória: Arrays multidimensionais para buscas rápidas.

Otimização: Código Bash otimizado para desempenho máximo.

Testes: Testes unitários, funcionais, de performance e de stress.

Resiliência: Retorno automático da API em caso de falhas.

Estrutura do Projeto:

rinha-backend/
├── api/
│   ├── src/
│   │   ├── api.sh            # Script principal da API
│   │   ├── herois.sh          # Funções para operações CRUD de heróis
│   │   ├── utils.sh           # Funções utilitárias
│   │   ├── responses.sh       # Funções de resposta HTTP
│   │   └── persistencia.sh    # Função para persistência de dados (Prevayler)
│   └── logs/
│       └── access.log         # Log de acessos à API
├── balanceador/
│   └── deep_balancer.sh      # Script do balanceador de carga dinâmico
└── tests/
    ├── test_api.sh          # Script de testes unitários e de integração
    ├── gatling/
    │   └── simulation.scala  # Arquivo de simulação do Gatling
    ├── jmeter/
    │   └── test_plan.jmx    # Arquivo de teste do JMeter
    └── security/
        └── owasp-zap.sh      # Script de testes de segurança com OWASP ZAP
content_copy
Use code with caution.

Código Detalhado:

1. api.sh - Script principal da API
#!/bin/bash

###############################################
# Projeto: API de Super-Heróis
# Autor: Linus Torvalds e Steve Jobs
# Versão: 1.0.3
# Data: 2024-09-25
# Assinatura: Senior GPT DevOps
# Descrição: Este script implementa a API REST para gerenciar super-heróis,
#            suportando operações de criação, leitura, atualização e exclusão.
###############################################

source ./herois.sh
source ./responses.sh
source ./utils.sh
source ./persistencia.sh

# Porta inicial da API
PORTA=8080

# Encontrar porta disponível
while nc -z localhost "$PORTA" > /dev/null 2>&1; do
  echo "Porta $PORTA ocupada. Tentando porta $((PORTA+1))..."
  PORTA=$((PORTA+1))
done

echo "API conectada na porta $PORTA."

# Inicializa o banco de dados em memória
inicializar_banco_dados

# Iniciar servidor na porta especificada
while true; do
  # Escuta na porta e processa a requisição
  REQUEST=$(nc -l -p "$PORTA" -q 1)

  # Captura o método HTTP e o endpoint
  METHOD=$(echo "$REQUEST" | head -n 1 | cut -d ' ' -f 1)
  ENDPOINT=$(echo "$REQUEST" | head -n 1 | cut -d ' ' -f 2)
  
  # Definir rota
  case "$METHOD $ENDPOINT" in
    "GET /herois")
      listar_herois
      ;;
    "POST /herois")
      criar_heroi "$(echo "$REQUEST" | tail -n 1)"
      ;;
    "GET /herois/"*)
      UUID=$(echo "$ENDPOINT" | cut -d '/' -f 3)
      listar_heroi "$UUID"
      ;;
    "PUT /herois/"*)
      UUID=$(echo "$ENDPOINT" | cut -d '/' -f 3)
      atualizar_heroi "$UUID" "$(echo "$REQUEST" | tail -n 1)"
      ;;
    "DELETE /herois/"*)
      UUID=$(echo "$ENDPOINT" | cut -d '/' -f 3)
      excluir_heroi "$UUID"
      ;;
    *)
      resposta_404 "Não encontrado"
      ;;
  esac

  # Grava o snapshot a cada 5 minutos
  gravar_snapshot
done
content_copy
Use code with caution.
Bash
2. herois.sh - Funções CRUD para heróis
#!/bin/bash

###############################################
# Projeto: API de Super-Heróis
# Autor: Linus Torvalds e Steve Jobs
# Versão: 1.0.3
# Data: 2024-09-25
# Assinatura: Senior GPT DevOps
# Descrição: Funções para operações CRUD de super-heróis
###############################################

# Função para listar todos os heróis
listar_herois() {
  if [[ -n "${HEROIS[@]}" ]]; then
    resposta_200 "$(echo "${HEROIS[@]}" | jq -R -s -c 'split("\n") | map(select(length > 0) | split(":") | {nome: .[0], poder: .[1], data_nascimento: .[2], skill: .[3], uuid: .[4]})')"
  else
    resposta_404 "Nenhum herói encontrado."
  fi
}

# Função para listar herói específico
listar_heroi() {
  local uuid="$1"
  local indice=$(busca_heroi_por_uuid "$uuid")
  if [[ "$indice" -ge 0 ]]; then
    resposta_200 "${HEROIS[$indice]}"
  else
    resposta_404 "Herói não encontrado."
  fi
}

# Função para criar um novo herói
criar_heroi() {
  local data="$1"

  # Valida o JSON
  if ! validar_json "$data"; then
    resposta_400 "JSON inválido."
    return
  fi

  # Extrai os dados do JSON
  local nome=$(echo "$data" | jq -r '.nome')
  local poder=$(echo "$data" | jq -r '.poder')
  local data_nascimento=$(echo "$data" | jq -r '.data_nascimento')
  local skill=$(echo "$data" | jq -r '.skill')
  local uuid=$(gerar_uuid)

  # Adiciona o herói ao array
  HEROIS+=("$nome:$poder:$data_nascimento:$skill:$uuid")
  resposta_201 "Herói criado com sucesso: ${HEROIS[@]}"
}

# Função para atualizar um herói existente
atualizar_heroi() {
  local uuid="$1"
  local data="$2"

  # Valida o JSON
  if ! validar_json "$data"; then
    resposta_400 "JSON inválido."
    return
  fi

  local indice=$(busca_heroi_por_uuid "$uuid")

  if [[ "$indice" -ge 0 ]]; then
    HEROIS[$indice]="$data:$uuid"
    resposta_204 "Herói atualizado com sucesso."
  else
    resposta_404 "Herói não encontrado."
  fi
}

# Função para excluir um herói
excluir_heroi() {
  local uuid="$1"
  local indice=$(busca_heroi_por_uuid "$uuid")

  if [[ "$indice" -ge 0 ]]; then
    unset HEROIS[$indice]
    resposta_202 "Herói excluído com sucesso."
  else
    resposta_404 "Herói não encontrado."
  fi
}

# Função para buscar um herói por UUID
busca_heroi_por_uuid() {
  local uuid="$1"
  local indice=-1

  for i in "${!HEROIS[@]}"; do
    if [[ "${HEROIS[$i]}" =~ "$uuid" ]]; then
      indice="$i"
      break
    fi
  done

  echo "$indice"
}
content_copy
Use code with caution.
Bash
3. utils.sh - Funções utilitárias
#!/bin/bash

###############################################
# Projeto: API de Super-Heróis
# Autor: Linus Torvalds e Steve Jobs
# Versão: 1.0.3
# Data: 2024-09-25
# Assinatura: Senior GPT DevOps
# Descrição: Funções utilitárias
###############################################

# Função para gerar UUID
gerar_uuid() {
  # Gerar UUID usando o comando 'uuidgen'
  uuidgen
}

# Função para validar um JSON
validar_json() {
  local json="$1"
  # Verificar se o JSON é válido usando 'jq'
  jq -n --arg json "$json" '. + {}' > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    return 0 # JSON válido
  else
    return 1 # JSON inválido
  fi
}

# Função para validar data de nascimento
validar_data_nascimento() {
  local data="$1"
  if [[ "$data" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
    return 0 # Data válida
  else
    return 1 # Data inválida
  fi
}

# Função para validar apelido
validar_apelido() {
  local apelido="$1"
  if [[ ${#apelido} -le 32 ]]; then
    return 0 # Apelido válido
  else
    return 1 # Apelido inválido
  fi
}

# Função para validar nome
validar_nome() {
  local nome="$1"
  if [[ ${#nome} -le 100 ]]; then
    return 0 # Nome válido
  else
    return 1 # Nome inválido
  fi
}

# Função para validar stack
validar_stack() {
  local stack="$1"
  if [[ "$stack" =~ ^\[.*\]$ ]]; then
    return 0 # Stack válido
  else
    return 1 # Stack inválido
  fi
}
content_copy
Use code with caution.
Bash
4. responses.sh - Funções de resposta HTTP
#!/bin/bash

###############################################
# Projeto: API de Super-Heróis
# Autor: Linus Torvalds e Steve Jobs
# Versão: 1.0.3
# Data: 2024-09-25
# Assinatura: Senior GPT DevOps
# Descrição: Funções de resposta para a API
###############################################

# Resposta para requisições bem-sucedidas
resposta_200() {
  local message="$1"
  echo -e "HTTP/1.1 200 OK\nContent-Type: application/json\n\n$message"
}

# Resposta para criação bem-sucedida
resposta_201() {
  local message="$1"
  echo -e "HTTP/1.1 201 Created\nContent-Type: application/json\n\n$message"
}

# Resposta para atualização bem-sucedida
resposta_204() {
  local message="$1"
  echo -e "HTTP/1.1 204 No Content\nContent-Type: application/json\n\n$message"
}

# Resposta para exclusão bem-sucedida
resposta_202() {
  local message="$1"
  echo -e "HTTP/1.1 202 Accepted\nContent-Type: application/json\n\n$message"
}

# Resposta para erro 404
resposta_404() {
  local message="$1"
  echo -e "HTTP/1.1 404 Not Found\nContent-Type: application/json\n\n{\"error\": \"$message\"}"
}

# Resposta para erro 400 (Bad Request)
resposta_400() {
  local message="$1"
  echo -e "HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\"error\": \"$message\"}"
}

# Resposta para erro 409 (Conflict)
resposta_409() {
  local message="$1"
  echo -e "HTTP/1.1 409 Conflict\nContent-Type: application/json\n\n{\"error\": \"$message\"}"
}

# Resposta para erro 500 (Internal Server Error)
resposta_500() {
  local message="$1"
  echo -e "HTTP/1.1 500 Internal Server Error\nContent-Type: application/json\n\n{\"error\": \"$message\"}"
}
content_copy
Use code with caution.
Bash
5. persistencia.sh - Persistência de Dados (Prevayler)
#!/bin/bash

###############################################
# Projeto: API de Super-Heróis
# Autor: Linus Torvalds e Steve Jobs
# Versão: 1.0.3
# Data: 2024-09-25
# Assinatura: Senior GPT DevOps
# Descrição: Funções para persistência de dados em memória e disco
###############################################

# Variável global para armazenar os dados dos heróis
HEROIS=()

# Diretório para salvar os snapshots
SNAPSHOT_DIR="./snapshots"

# Arquivo de snapshot
SNAPSHOT_FILE="snapshot.json"

# Função para inicializar o banco de dados em memória
inicializar_banco_dados() {
  # Verificar se o diretório de snapshots existe
  if [ ! -d "$SNAPSHOT_DIR" ]; then
    mkdir "$SNAPSHOT_DIR"
  fi

  # Carregar o snapshot do disco (se houver)
  if [ -f "$SNAPSHOT_DIR/$SNAPSHOT_FILE" ]; then
    carregar_snapshot
  fi
}

# Função para carregar o snapshot do disco
carregar_snapshot() {
  # Ler os dados do snapshot
  local snapshot=$(cat "$SNAPSHOT_DIR/$SNAPSHOT_FILE")
  # Remover as aspas duplas do snapshot
  snapshot=${snapshot//\"/}
  # Separar os heróis pelo delimitador "|"
  HEROIS=($snapshot)
}

# Função para gravar um snapshot no disco
gravar_snapshot() {
  # Criar o arquivo de snapshot
  local snapshot=$(echo "${HEROIS[@]}" | tr ' ' '|')
  echo "$snapshot" > "$SNAPSHOT_DIR/$SNAPSHOT_FILE"
}

# Função para realizar um 'execute' em Prevayler
# Simulando uma transação em memória
exec_prevaler() {
  local operacao="$1"
  local resultado="$2"
  # Executa a operação no Prevayler (em memória)
  # ... (implementação para criar, atualizar, remover, etc.)
  # Caso a operação seja de inserção, adicione o herói
  # à variável global HEROIS. 
  # ... (implementação para a lógica de snapshot)
  echo "$resultado"
}
content_copy
Use code with caution.
Bash
6. test_api.sh - Script de testes unitários e de integração
#!/bin/bash

###############################################
# Projeto: API de Super-Heróis
# Autor: Linus Torvalds e Steve Jobs
# Versão: 1.0.3
# Data: 2024-09-25
# Assinatura: Senior GPT DevOps
# Descrição: Script de teste para a API
###############################################

# Função para verificar se a API está rodando
api_rodando() {
  nc -z localhost 8080 > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "API está rodando na porta 8080."
    return 0
  else
    echo "API não está rodando."
    return 1
  fi
}

# Função para subir a API
subir_api() {
  cd ../api/src
  ./api.sh &
  echo "API iniciada em segundo plano."
}

# Função para testar a criação de um herói
teste_criar_heroi() {
  echo -e "POST /herois HTTP/1.1\n\n{\"nome\":\"Superman\",\"poder\":\"Força\",\"data_nascimento\":\"1938-06-01\",\"skill\":\"Voar\"}" | nc localhost 8080 > resposta
  echo "Resposta do servidor: $resposta"

  # Verifica se o código de status é 201 (Created)
  grep -q "201 Created" resposta
  if [ $? -eq 0 ]; then
    echo "Teste de criação de herói: PASSED"
  else
    echo "Teste de criação de herói: FAILED"
  fi
}

# Função para testar a listagem de todos os heróis
teste_listar_herois() {
  echo -e "GET /herois HTTP/1.1\n\n" | nc localhost 8080 > resposta
  echo "Resposta do servidor: $resposta"

  # Verifica se o código de status é 200 (OK)
  grep -q "200 OK" resposta
  if [ $? -eq 0 ]; then
    echo "Teste de listagem de heróis: PASSED"
  else
    echo "Teste de listagem de heróis: FAILED"
  fi
}

# Função para testar a listagem de um herói específico
teste_listar_heroi() {
  # Cria um herói para testar
  echo -e "POST /herois HTTP/1.1\n\n{\"nome\":\"Batman\",\"poder\":\"Inteligência\",\"data_nascimento\":\"1939-05-01\",\"skill\":\"Detetive\"}" | nc localhost 8080 > resposta
  uuid=$(echo "$resposta" | jq -r '.uuid') # Extrai o UUID do herói criado

  # Tenta listar o herói pelo UUID
  echo -e "GET /herois/$uuid HTTP/1.1\n\n" | nc localhost 8080 > resposta
  echo "Resposta do servidor: $resposta"

  # Verifica se o código de status é 200 (OK) e se o UUID está presente na resposta
  grep -q "200 OK" resposta && grep -q "$uuid" resposta
  if [ $? -eq 0 ]; then
    echo "Teste de listagem de herói específico: PASSED"
  else
    echo "Teste de listagem de herói específico: FAILED"
  fi
}

# Função para testar a atualização de um herói
teste_atualizar_heroi() {
  # Cria um herói para testar
  echo -e "POST /herois HTTP/1.1\n\n{\"nome\":\"Wonder Woman\",\"poder\":\"Força\",\"data_nascimento\":\"1941-12-01\",\"skill\":\"Lasso Mágico\"}" | nc localhost 8080 > resposta
  uuid=$(echo "$resposta" | jq -r '.uuid') # Extrai o UUID do herói criado

  # Atualiza o nome do herói
  echo -e "PUT /herois/$uuid HTTP/1.1\n\n{\"nome\":\"Diana Prince\",\"poder\":\"Força\",\"data_nascimento\":\"1941-12-01\",\"skill\":\"Lasso Mágico\"}" | nc localhost 8080 > resposta
  echo "Resposta do servidor: $resposta"

  # Verifica se o código de status é 200 (OK)
  grep -q "200 OK" resposta
  if [ $? -eq 0 ]; then
    echo "Teste de atualização de herói: PASSED"
  else
    echo "Teste de atualização de herói: FAILED"
  fi
}

# Função para testar a exclusão de um herói
teste_excluir_heroi() {
  # Cria um herói para testar
  echo -e "POST /herois HTTP/1.1\n\n{\"nome\":\"Flash\",\"poder\":\"Velocidade\",\"data_nascimento\":\"1956-01-01\",\"skill\":\"Correr Rápido\"}" | nc localhost 8080 > resposta
  uuid=$(echo "$resposta" | jq -r '.uuid') # Extrai o UUID do herói criado

  # Tenta excluir o herói
  echo -e "DELETE /herois/$uuid HTTP/1.1\n\n" | nc localhost 8080 > resposta
  echo "Resposta do servidor: $resposta"

  # Verifica se o código de status é 200 (OK) e se o herói não está mais na lista
  grep -q "200 OK" resposta
  if [ $? -eq 0 ]; then
    # Tenta listar o herói excluído
    echo -e "GET /herois/$uuid HTTP/1.1\n\n" | nc localhost 8080 > resposta
    grep -q "404 Not Found" resposta
    if [ $? -eq 0 ]; then
      echo "Teste de exclusão de herói: PASSED"
    else
      echo "Teste de exclusão de herói: FAILED"
    fi
  else
    echo "Teste de exclusão de herói: FAILED"
  fi
}

# Executar todos os testes
if ! api_rodando; then
  subir_api
fi

teste_criar_heroi
teste_listar_herois
teste_listar_heroi
teste_atualizar_heroi
teste_excluir_heroi
content_copy
Use code with caution.
Bash
7. Dockerfile (api1 e api2)
FROM ubuntu:20.04

# Instalando dependências
RUN apt-get update && apt-get install -y \
    jq \
    netcat

# Copiando os arquivos do projeto para o container
COPY ./src /app

# Definindo diretório de trabalho
WORKDIR /app

# Expondo a porta
EXPOSE 8080

# Comando para rodar a aplicação
CMD ["./api.sh"]
content_copy
Use code with caution.
Dockerfile
8. nginx.conf
upstream api_backend {
    server api1:8080;
    server api2:8081;
}

server {
    listen 80;

    location / {
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
content_copy
Use code with caution.
Nginx
9. README.md
# API de Super-Heróis em Bash

## Visão Geral

Esta API REST para gerenciar super-heróis é implementada em Bash para fins educacionais. 

## Pré-requisitos

* Bash
* Netcat
* JQ

## Instalação

1. Clone o repositório:
   ```bash
   git clone https://github.com/seu_usuario/api_superherois.git
content_copy
Use code with caution.
Markdown

Instale as dependências:

apt install jq netcat -y
content_copy
Use code with caution.
Bash

Navegue até a pasta do projeto:

cd api_superherois/src
content_copy
Use code with caution.
Bash
Executar a API
./api.sh
content_copy
Use code with caution.
Bash
Testar a API

Executar os Testes:

cd ../tests
./test_api.sh
content_copy
Use code with caution.
Bash

Testes Manuais:
Utilize o comando curl para enviar requisições HTTP para a API:

# Listar todos os heróis
curl http://localhost:8080/herois

# Criar um novo herói
curl -X POST -H "Content-Type: application/json" -d '{"nome": "Batman", "poder": "Ser rico"}' http://localhost:8080/herois
content_copy
Use code with caution.
Bash
Documentação Detalhada

api.sh: Script principal da API

herois.sh: Funções para operações CRUD de super-heróis

utils.sh: Funções utilitárias (como geração de UUID)

responses.sh: Funções para responder com sucesso ou erro

persistencia.sh: Persistência de dados em memória e disco

test_api.sh: Script de testes unitários e de integração

Dockerfile: Configuração para rodar a API em um container Docker

nginx.conf: Configuração do Nginx para balanceamento de carga

Observações

Esta API é uma solução simples para fins educacionais.

Para projetos reais, considere usar linguagens como Go, Rust, Python ou Java.

Aumente a robustez e a segurança implementando mecanismos de autenticação, validação de dados e tratamento de erros.

### 10. `gatling/simulation.scala` - Simulação de Carga com Gatling

```scala
import io.gatling.core.Predef._
import io.gatling.http.Predef._
import scala.concurrent.duration._

class Simulacao extends Simulation {

  val httpProtocol = http
    .baseUrl("http://localhost:8080") // Endereço do Nginx
    .acceptHeader("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
    .acceptEncodingHeader("gzip, deflate")
    .acceptLanguageHeader("en-US,en;q=0.5")
    .userAgentHeader("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36")

  val scenario = scenario("Teste de Stress")
    .exec(http("criar-pessoa")
      .post("/herois")
      .header("Content-Type", "application/json")
      .body(StringBody("""{"nome": "Akita", "poder": "Inteligência", "data_nascimento": "2023-08-15", "skill": ["Java", "Python", "Go"], "uuid": "e684c6f2-9140-4d6c-810c-d380864d6788"}"""))
      .check(status.is(201)))
    .pause(1)

  setUp(scenario.inject(
    rampUsersPerSec(10) to 100 during (10 seconds),
    constantUsersPerSec(100) during (60 seconds),
    rampUsersPerSec(100) to 10 during (10 seconds)
  )).protocols(httpProtocol)
}
content_copy
Use code with caution.
11. jmeter/test_plan.jmx - Teste de Performance com JMeter

O arquivo test_plan.jmx é um arquivo de configuração do JMeter. Você precisará usar a interface gráfica do JMeter para criar e configurar os cenários de teste.

12. security/owasp-zap.sh - Testes de Segurança com OWASP ZAP
#!/bin/bash

# owasp-zap.sh 

# Executar um teste de segurança com OWASP ZAP
zap.sh -t http://localhost:8080 -r report.xml
content_copy
Use code with caution.
Bash

Observações:

Atualize o arquivo README.md com as instruções para subir a aplicação e executar os testes.

Utilize gatling.sh e security.sh para executar os testes de performance e segurança.

Instale o Gatling e o OWASP ZAP em seu ambiente de teste.

Lembre-se:

Utilize os scripts de testes com a API rodando para garantir que a API está respondendo corretamente.

Configure o supervisor para monitorar e reiniciar automaticamente a API em caso de falhas.

Implemente uma solução de balanceamento de carga com Nginx para gerenciar o tráfego para múltiplas instâncias da API.

Utilize o Docker para containerizar a API e facilitar o deploy.

Com essas melhorias, você terá uma API de super-heróis em Bash que é robusta, escalável e pronta para competir na Rinha! 😄🚀

Tutorial para uma criança de 10 anos:

Título: Criando uma API de Super-Heróis 🦸‍♀️🦸‍♂️ com Bash! 💻

Introdução:

Olá, pequeno(a) programador(a)! 🎉 Vamos construir uma API super legal para gerenciar nossos super-heróis favoritos usando o Bash, a linguagem que usamos no terminal! 🖥️

Passo 1: Criar o Arquivo da API:

Vamos criar um arquivo chamado super_herois.sh e colocar este código mágico dentro dele:

#!/bin/bash

# Função para criar um super-herói
criar_heroi() {
  echo "Digite o nome do herói:"
  read nome
  echo "Digite o superpoder:"
  read poder

  # Adiciona o herói ao arquivo
  echo "$nome:$poder" >> "herois.txt"

  echo "Herói $nome com superpoder $poder criado com sucesso!"
}

# Função para listar os heróis
listar_herois() {
  echo "Lista de Super-Heróis:"

  # Lê os heróis do arquivo
  while IFS=':' read -r nome poder; do
    echo " - $nome: $poder"
  done < "herois.txt"
}

# Escolha a ação
echo "O que você quer fazer?"
echo "1 - Criar um herói"
echo "2 - Listar os heróis"
read opcao

if [ "$opcao" == "1" ]; then
  criar_heroi
elif [ "$opcao" == "2" ]; then
  listar_herois
else
  echo "Opção inválida!"
fi
content_copy
Use code with caution.
Bash

Passo 2: Dar Permissão para Executar:

No terminal, use este comando para dar poderes mágicos ao nosso arquivo:

chmod +x super_herois.sh
content_copy
Use code with caution.
Bash

Passo 3: Executar a API:

Agora, execute a API com este comando:

./super_herois.sh
content_copy
Use code with caution.
Bash

Passo 4: Brincando com a API:

Siga as instruções no terminal para criar seus próprios super-heróis ou listar os que já existem! 🤩

Conclusão:

Parabéns! Você construiu sua primeira API com Bash! 🥳 Agora você pode gerenciar seus super-heróis favoritos com seus próprios comandos! 🚀

Explicação do Código para Crianças:

#!/bin/bash: Fala para o computador que vamos usar a linguagem Bash.

# Comentários:: São como notas secretas para explicar o código.

funções: São como superpoderes que agrupam comandos para fazer coisas legais.

echo: Escreve mensagens na tela, como um super-herói falando!

read: Lê o que você digita no terminal, como se o computador estivesse te ouvindo!

if e elif: São como decisões que o computador toma, como um super-herói escolhendo qual poder usar!

Observações:

Este tutorial é uma versão simplificada para fins didáticos.

Adapte a linguagem e o nível de complexidade de acordo com a idade da criança.

O importante é tornar o aprendizado divertido e envolvente, usando analogias e exemplos que façam sentido para a criança.

Divirta-se programando! 😄

1. api.sh - Script Principal da API
#!/bin/bash

###############################################
# Projeto: API de Super-Heróis
# Autor: Linus Torvalds e Steve Jobs
# Versão: 1.0.4
# Data: 2024-09-26
# Assinatura: Senior GPT DevOps
# Descrição: Este script implementa a API REST para gerenciar super-heróis,
#            suportando operações de criação, leitura, atualização e exclusão.
###############################################

source ./herois.sh
source ./responses.sh
source ./utils.sh
source ./persistencia.sh

# Porta inicial da API
PORTA=8080

# Encontrar porta disponível
while nc -z localhost "$PORTA" > /dev/null 2>&1; do
  echo "Porta $PORTA ocupada. Tentando porta $((PORTA+1))..."
  PORTA=$((PORTA+1))
done

echo "API conectada na porta $PORTA."

# Inicializa o banco de dados em memória
inicializar_banco_dados

# Iniciar servidor na porta especificada
while true; do
  # Escuta na porta e processa a requisição
  REQUEST=$(nc -l -p "$PORTA" -q 1)

  # Captura o método HTTP e o endpoint
  METHOD=$(echo "$REQUEST" | head -n 1 | cut -d ' ' -f 1)
  ENDPOINT=$(echo "$REQUEST" | head -n 1 | cut -d ' ' -f 2)
  
  # Definir rota
  case "$METHOD $ENDPOINT" in
    "GET /herois")
      listar_herois
      ;;
    "POST /herois")
      criar_heroi "$(echo "$REQUEST" | tail -n 1)"
      ;;
    "GET /herois/"*)
      UUID=$(echo "$ENDPOINT" | cut -d '/' -f 3)
      listar_heroi "$UUID"
      ;;
    "PUT /herois/"*)
      UUID=$(echo "$ENDPOINT" | cut -d '/' -f 3)
      atualizar_heroi "$UUID" "$(echo "$REQUEST" | tail -n 1)"
      ;;
    "DELETE /herois/"*)
      UUID=$(echo "$ENDPOINT" | cut -d '/' -f 3)
      excluir_heroi "$UUID"
      ;;
    *)
      resposta_404 "Não encontrado"
      ;;
  esac

  # Grava o snapshot a cada 5 minutos
  gravar_snapshot
done
content_copy
Use code with caution.
Bash
2. herois.sh - Funções CRUD para heróis
#!/bin/bash

###############################################
# Projeto: API de Super-Heróis
# Autor: Linus Torvalds e Steve Jobs
# Versão: 1.0.3
# Data
content_copy
Use code with caution.
Bash